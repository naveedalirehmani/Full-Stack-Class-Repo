{"ast":null,"code":"var _jsxFileName = \"/home/xuba/Desktop/clone-code/fullStackClassRepo/src/components/manageState.jsx\";\nimport React from \"react\";\nimport Code from \"./code\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ManageState = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Code, {\n      value: `import { createContext, useContext, useReducer } from \"react\"\n\nconst initialState = {\n    allUsers:[],\n    loggedInUser:{}\n}\n\nconst reducer = (state,action)=>{\n    switch (action.type) {\n        case 'ADD_USER':\n            return {...state,allUsers:[...state.allUsers,action.payload]}\n        case 'ADD_LOGGINED_USER':\n            return {...state,loggedInUser:action.payload}\n        case 'REMOVE_LOGGINED_USER':\n            return {...state,loggedInUser:{}}\n        default:\n            return state\n    }\n}\n\nconst StoreContext = createContext(null);\n\nconst Store = ()=>{\n    const [state,dispatch]  = useReducer(reducer,initialState)\n    return {state,dispatch}\n}\n\n\nconst StoreProvider =({children})=>{\n    return <StoreContext.Provider value={Store()}>{children}</StoreContext.Provider>\n}\n\nexport const useStore = () => useContext(StoreContext).state\nexport const useDispatch = () => useContext(StoreContext).dispatch\n\nexport default StoreProvider;\n`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Explanation of Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The code creates a custom state manager that utilizes the React hooks\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n        className: \"code\",\n        children: \"createContext\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), \",\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n        className: \"code\",\n        children: \"useContext\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), \", and\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n        className: \"code\",\n        children: \"useReducer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), \". The following application was built using this state managment library, The state manager is composed of several components:\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"initialState\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), \": An object that represents the initial state of the application. In this case, it has two properties: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"allUsers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 23\n        }, this), \" and\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"loggedInUser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"reducer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), \": A function that takes the current state and an action as arguments, and returns the next state based on the action type. The function has a switch statement that handles different actions, such as adding a user to\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"allUsers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), \" or adding the logged-in user to\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"loggedInUser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"StoreContext\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), \": A context object created using \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"createContext\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"Store\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), \": A hook that utilizes\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"useReducer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), \" to manage the state. It takes the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"reducer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), \" and\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"initialState\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), \" as arguments and returns an object with the current state and the dispatch function.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"StoreProvider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), \": A component that wraps its children and provides the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"Store\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 41\n        }, this), \" \", \"object to them using the\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"StoreContext.Provider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"useStore\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), \" and\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"useDispatch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), \" : These are custom hooks that provide easy access to the state and dispatch function respectively by using \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"useContext\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 33\n        }, this), \" to consume the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"code\",\n          children: \"StoreContext\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 23\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Why we might require a state manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A state manager is a way to centralize the management of the application's state and provide a way for different components to access and update the state. This can make it easier to:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Track the changes in the state over time.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Update the state in a predictable way.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Share the state between different components.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Avoid prop drilling, where the same props have to be passed down multiple levels of components.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Other state management libraries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There are several other state management libraries that can be used in a React application, such as:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Redux: A popular state management library that is based on the principles of functional programming.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"MobX: A library that uses observables and reactions to simplify the management of the state.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Unstated: A library that provides a way to manage the state using hooks and context, similar to the custom state manager shown in the code.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Apollo Client: A library that is specifically designed for managing the state of a GraphQL API.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Code, {\n      value: `\n      import React, { useEffect, useState } from 'react';\n      import { useDispatch, useStore } from '../store';\n      \n      function LogInPage (props){\n          \n          \n          const allUsers = useStore().allUsers\n          const dispatch = useDispatch()\n      \n          const [userData,setUserData] = useState({\n              email:'',\n              password:\"\"\n          })\n      \n              \n        const saveLoginInfo = (e) =>{\n          let newUser = userData;\n          newUser = {...newUser,[e.target.name]:e.target.value}\n          setUserData(newUser)\n        }\n        \n          const loginHandler = ()=>{\n            \n              const user = allUsers.find(item => {\n                  return item.email === userData.email && item.password === userData.password\n              })\n      \n              if(user){\n                  dispatch({type:'ADD_LOGGINED_USER',payload:user})\n                  Navigate('/userprofile')\n              }else{\n                  alert(\"no such user\")\n              }\n              \n          }  \n      \n          return <div></div>\n      }\n      \n      \n      export default LogInPage;`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"useStore and useDispatch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"useStore and useDispatch are custom hooks that you can use to access the state and dispatch function of your store. They are exported from the custom store file and can be used in any component that is wrapped by the StoreProvider component.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"useStore\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"useStore is a hook that returns the current state of the store.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"It's used to access the state of the store and to get the value of a specific state property. For example, you can use it to get the value of the `allUsers` property of the store state.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"For example:\", /*#__PURE__*/_jsxDEV(\"pre\", {\n          class: \"code\",\n          children: \"const allUsers = useStore().allUsers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"useDispatch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"useDispatch is a hook that returns the dispatch function of the store.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"It's used to update the state of the store by dispatching an action. For example, you can use it to add a user to the `allUsers` property of the store state.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"For example:\", /*#__PURE__*/_jsxDEV(\"pre\", {\n          class: \"code\",\n          children: [\"const dispatch = useDispatch()\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), `dispatch({type:'ADD_LOGGINED_USER',payload:user})`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"In the above code, useStore returns the state object and useDispatch returns the dispatch function of the store. The dispatch function takes an action object as an argument and it's used to update the state of the store by calling the reducer function.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n_c = ManageState;\nexport default ManageState;\nvar _c;\n$RefreshReg$(_c, \"ManageState\");","map":{"version":3,"names":["React","Code","ManageState"],"sources":["/home/xuba/Desktop/clone-code/fullStackClassRepo/src/components/manageState.jsx"],"sourcesContent":["import React from \"react\";\nimport Code from \"./code\";\n\nexport const ManageState = () => {\n  return (\n    <div>\n      <Code\n        value={`import { createContext, useContext, useReducer } from \"react\"\n\nconst initialState = {\n    allUsers:[],\n    loggedInUser:{}\n}\n\nconst reducer = (state,action)=>{\n    switch (action.type) {\n        case 'ADD_USER':\n            return {...state,allUsers:[...state.allUsers,action.payload]}\n        case 'ADD_LOGGINED_USER':\n            return {...state,loggedInUser:action.payload}\n        case 'REMOVE_LOGGINED_USER':\n            return {...state,loggedInUser:{}}\n        default:\n            return state\n    }\n}\n\nconst StoreContext = createContext(null);\n\nconst Store = ()=>{\n    const [state,dispatch]  = useReducer(reducer,initialState)\n    return {state,dispatch}\n}\n\n\nconst StoreProvider =({children})=>{\n    return <StoreContext.Provider value={Store()}>{children}</StoreContext.Provider>\n}\n\nexport const useStore = () => useContext(StoreContext).state\nexport const useDispatch = () => useContext(StoreContext).dispatch\n\nexport default StoreProvider;\n`}\n      ></Code>\n      <h1>Explanation of Code</h1>\n      <p>\n        The code creates a custom state manager that utilizes the React hooks{\" \"}\n        <code className=\"code\">createContext</code>,{\" \"}\n        <code className=\"code\">useContext</code>, and{\" \"}\n        <code className=\"code\">useReducer</code>. The following application was built using this state managment library, The state manager is composed\n        of several components:\n      </p>\n      <ul>\n        <li>\n          <code className=\"code\">initialState</code>: An object that represents\n          the initial state of the application. In this case, it has two\n          properties: <code className=\"code\">allUsers</code> and{\" \"}\n          <code className=\"code\">loggedInUser</code>.\n        </li>\n        <li>\n          <code className=\"code\">reducer</code>: A function that takes the\n          current state and an action as arguments, and returns the next state\n          based on the action type. The function has a switch statement that\n          handles different actions, such as adding a user to{\" \"}\n          <code className=\"code\">allUsers</code> or adding the logged-in user to{\" \"}\n          <code className=\"code\">loggedInUser</code>.\n        </li>\n        <li>\n          <code className=\"code\">StoreContext</code>: A context object created\n          using <code className=\"code\">createContext</code>.\n        </li>\n        <li>\n          <code className=\"code\">Store</code>: A hook that utilizes{\" \"}\n          <code className=\"code\">useReducer</code> to manage the state. It takes\n          the <code className=\"code\">reducer</code> and{\" \"}\n          <code className=\"code\">initialState</code> as arguments and returns an\n          object with the current state and the dispatch function.\n        </li>\n        <li>\n          <code className=\"code\">StoreProvider</code>: A component that wraps\n          its children and provides the <code className=\"code\">Store</code>{\" \"}\n          object to them using the{\" \"}\n          <code className=\"code\">StoreContext.Provider</code>.\n        </li>\n        <li>\n          <code className=\"code\">useStore</code> and{\" \"}\n          <code className=\"code\">useDispatch</code> : These are custom hooks\n          that provide easy access to the state and dispatch function\n          respectively by using <code className=\"code\">useContext</code> to\n          consume the <code className=\"code\">StoreContext</code>.\n        </li>\n      </ul>\n      <h1>Why we might require a state manager</h1>\n      <p>\n        A state manager is a way to centralize the management of the\n        application's state and provide a way for different components to access\n        and update the state. This can make it easier to:\n      </p>\n      <ul>\n        <li>Track the changes in the state over time.</li>\n        <li>Update the state in a predictable way.</li>\n        <li>Share the state between different components.</li>\n        <li>\n          Avoid prop drilling, where the same props have to be passed down\n          multiple levels of components.\n        </li>\n      </ul>\n      <h1>Other state management libraries</h1>\n      <p>\n        There are several other state management libraries that can be used in a\n        React application, such as:\n      </p>\n      <ul>\n        <li>\n          Redux: A popular state management library that is based on the\n          principles of functional programming.\n        </li>\n        <li>\n          MobX: A library that uses observables and reactions to simplify the\n          management of the state.\n        </li>\n        <li>\n          Unstated: A library that provides a way to manage the state using\n          hooks and context, similar to the custom state manager shown in the\n          code.\n        </li>\n        <li>\n          Apollo Client: A library that is specifically designed for managing\n          the state of a GraphQL API.\n        </li>\n      </ul>\n\n      <Code\n        value={`\n      import React, { useEffect, useState } from 'react';\n      import { useDispatch, useStore } from '../store';\n      \n      function LogInPage (props){\n          \n          \n          const allUsers = useStore().allUsers\n          const dispatch = useDispatch()\n      \n          const [userData,setUserData] = useState({\n              email:'',\n              password:\"\"\n          })\n      \n              \n        const saveLoginInfo = (e) =>{\n          let newUser = userData;\n          newUser = {...newUser,[e.target.name]:e.target.value}\n          setUserData(newUser)\n        }\n        \n          const loginHandler = ()=>{\n            \n              const user = allUsers.find(item => {\n                  return item.email === userData.email && item.password === userData.password\n              })\n      \n              if(user){\n                  dispatch({type:'ADD_LOGGINED_USER',payload:user})\n                  Navigate('/userprofile')\n              }else{\n                  alert(\"no such user\")\n              }\n              \n          }  \n      \n          return <div></div>\n      }\n      \n      \n      export default LogInPage;`}\n      ></Code>\n\n      <h1>useStore and useDispatch</h1>\n      <p>\n        useStore and useDispatch are custom hooks that you can use to access the\n        state and dispatch function of your store. They are exported from the\n        custom store file and can be used in any component that is wrapped by\n        the StoreProvider component.\n      </p>\n      <h2>useStore</h2>\n      <ul>\n        <li>useStore is a hook that returns the current state of the store.</li>\n        <li>\n          It's used to access the state of the store and to get the value of a\n          specific state property. For example, you can use it to get the value\n          of the `allUsers` property of the store state.\n        </li>\n        <li>\n          For example:\n          <pre class=\"code\">const allUsers = useStore().allUsers</pre>\n        </li>\n      </ul>\n      <h2>useDispatch</h2>\n      <ul>\n        <li>\n          useDispatch is a hook that returns the dispatch function of the store.\n        </li>\n        <li>\n          It's used to update the state of the store by dispatching an action.\n          For example, you can use it to add a user to the `allUsers` property\n          of the store state.\n        </li>\n        <li>\n          For example:\n          <pre class=\"code\">\n            const dispatch = useDispatch()\n            <br />\n            {`dispatch({type:'ADD_LOGGINED_USER',payload:user})`}\n          </pre>\n        </li>\n      </ul>\n      <p>\n        In the above code, useStore returns the state object and useDispatch\n        returns the dispatch function of the store. The dispatch function takes\n        an action object as an argument and it's used to update the state of the\n        store by calling the reducer function.\n      </p>\n    </div>\n  );\n};\n\nexport default ManageState;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}