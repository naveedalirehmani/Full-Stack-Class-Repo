{"ast":null,"code":"var _jsxFileName = \"/home/xuba/Desktop/clone-code/fullStackClassRepo/src/hooks/useReducer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from 'react';\nimport Code from '../components/code';\nimport './useReducer.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  todos: [],\n  currentTodo: ''\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        ...state,\n        todos: [...state.todos, {\n          text: action.payload,\n          completed: false\n        }],\n        currentTodo: ''\n      };\n    case 'UPDATE_CURRENT_TODO':\n      return {\n        ...state,\n        currentTodo: action.payload\n      };\n    case 'TOGGLE_TODO':\n      return {\n        ...state,\n        todos: state.todos.map((todo, index) => index === action.payload ? {\n          ...todo,\n          completed: !todo.completed\n        } : todo)\n      };\n    case 'DELETE_TODO':\n      return {\n        ...state,\n        todos: state.todos.filter((todo, index) => index !== action.payload)\n      };\n    case 'CLEAR_TODOS':\n      return {\n        ...state,\n        todos: []\n      };\n    default:\n      throw new Error();\n  }\n}\nexport const UseReducerHook = () => {\n  _s();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch({\n      type: 'ADD_TODO',\n      payload: state.currentTodo\n    });\n  };\n  const handleInputChange = e => {\n    dispatch({\n      type: 'UPDATE_CURRENT_TODO',\n      payload: e.target.value\n    });\n  };\n  const handleClearTodos = () => {\n    dispatch({\n      type: 'CLEAR_TODOS'\n    });\n  };\n  const deleteATodo = index => {\n    dispatch({\n      type: 'DELETE_TODO',\n      payload: index\n    });\n  };\n  const toggleTodo = index => {\n    dispatch({\n      type: 'TOGGLE_TODO',\n      payload: index\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: state.currentTodo,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearTodos,\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Clear Todos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: state.todos.map((todo, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            textDecoration: todo.completed ? 'line-through' : 'none'\n          },\n          children: [todo.text, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteATodo(index),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => toggleTodo(index),\n            children: \"?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Code :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Code, {\n        value: `import React, { useReducer } from 'react';\nimport './useReducer.css'\n\nconst initialState = {\n  todos: [],\n  currentTodo: ''\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        ...state,\n        todos: [...state.todos, {\n          text: action.payload,\n          completed: false\n        }],\n        currentTodo: ''\n      };\n    case 'UPDATE_CURRENT_TODO':\n      return {\n        ...state,\n        currentTodo: action.payload\n      };\n    case 'TOGGLE_TODO':\n      return {\n        ...state,\n        todos: state.todos.map((todo, index) =>\n          index === action.payload ? { ...todo, completed: !todo.completed } : todo\n        )\n      };\n    case 'DELETE_TODO':\n      return {\n        ...state,\n        todos: state.todos.filter((todo, index) =>index!==action.payload)\n      };\n    case 'CLEAR_TODOS':\n      return {\n        ...state,\n        todos: []\n      };\n    default:\n      throw new Error();\n  }\n}\n\nexport const UseReducerHook = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch({ type: 'ADD_TODO', payload: state.currentTodo });\n  };\n\n  const handleInputChange = e => {\n    dispatch({ type: 'UPDATE_CURRENT_TODO', payload: e.target.value });\n  };\n\n  const handleClearTodos = () => {\n    dispatch({ type: 'CLEAR_TODOS' });\n  };\n\n  const deleteATodo = (index) => {\n    dispatch({ type: 'DELETE_TODO',payload:index });\n  };\n\n  const toggleTodo = (index)=>{\n    dispatch({ type: 'TOGGLE_TODO', payload: index })\n  }\n  \n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={state.currentTodo}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      <button onClick={handleClearTodos}><li>Clear Todos</li></button>\n      <ul>\n        {state.todos.map((todo, index) => (\n          <li\n            key={index}\n            style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}\n          >\n            {todo.text}\n            <button onClick={()=>deleteATodo(index)}>X</button>\n            <button onClick={() => toggleTodo(index)}>?</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default UseReducerHook;\n`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(UseReducerHook, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = UseReducerHook;\nexport default UseReducerHook;\nvar _c;\n$RefreshReg$(_c, \"UseReducerHook\");","map":{"version":3,"names":["React","useReducer","Code","initialState","todos","currentTodo","reducer","state","action","type","text","payload","completed","map","todo","index","filter","Error","UseReducerHook","dispatch","handleSubmit","e","preventDefault","handleInputChange","target","value","handleClearTodos","deleteATodo","toggleTodo","textDecoration"],"sources":["/home/xuba/Desktop/clone-code/fullStackClassRepo/src/hooks/useReducer.jsx"],"sourcesContent":["import React, { useReducer } from 'react';\nimport Code from '../components/code';\nimport './useReducer.css'\n\nconst initialState = {\n  todos: [],\n  currentTodo: ''\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        ...state,\n        todos: [...state.todos, {\n          text: action.payload,\n          completed: false\n        }],\n        currentTodo: ''\n      };\n    case 'UPDATE_CURRENT_TODO':\n      return {\n        ...state,\n        currentTodo: action.payload\n      };\n    case 'TOGGLE_TODO':\n      return {\n        ...state,\n        todos: state.todos.map((todo, index) =>\n          index === action.payload ? { ...todo, completed: !todo.completed } : todo\n        )\n      };\n    case 'DELETE_TODO':\n      return {\n        ...state,\n        todos: state.todos.filter((todo, index) =>index!==action.payload)\n      };\n    case 'CLEAR_TODOS':\n      return {\n        ...state,\n        todos: []\n      };\n    default:\n      throw new Error();\n  }\n}\n\nexport const UseReducerHook = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch({ type: 'ADD_TODO', payload: state.currentTodo });\n  };\n\n  const handleInputChange = e => {\n    dispatch({ type: 'UPDATE_CURRENT_TODO', payload: e.target.value });\n  };\n\n  const handleClearTodos = () => {\n    dispatch({ type: 'CLEAR_TODOS' });\n  };\n\n  const deleteATodo = (index) => {\n    dispatch({ type: 'DELETE_TODO',payload:index });\n  };\n\n  const toggleTodo = (index)=>{\n    dispatch({ type: 'TOGGLE_TODO', payload: index })\n  }\n  \n  return (\n        <>\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={state.currentTodo}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      <button onClick={handleClearTodos}><li>Clear Todos</li></button>\n      <ul>\n        {state.todos.map((todo, index) => (\n          <li\n            key={index}\n            style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}\n          >\n            {todo.text}\n            <button onClick={()=>deleteATodo(index)}>X</button>\n            <button onClick={() => toggleTodo(index)}>?</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n\n    <div>\n      <p>\n      Code : \n        </p>  \n      <Code value={`import React, { useReducer } from 'react';\nimport './useReducer.css'\n\nconst initialState = {\n  todos: [],\n  currentTodo: ''\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        ...state,\n        todos: [...state.todos, {\n          text: action.payload,\n          completed: false\n        }],\n        currentTodo: ''\n      };\n    case 'UPDATE_CURRENT_TODO':\n      return {\n        ...state,\n        currentTodo: action.payload\n      };\n    case 'TOGGLE_TODO':\n      return {\n        ...state,\n        todos: state.todos.map((todo, index) =>\n          index === action.payload ? { ...todo, completed: !todo.completed } : todo\n        )\n      };\n    case 'DELETE_TODO':\n      return {\n        ...state,\n        todos: state.todos.filter((todo, index) =>index!==action.payload)\n      };\n    case 'CLEAR_TODOS':\n      return {\n        ...state,\n        todos: []\n      };\n    default:\n      throw new Error();\n  }\n}\n\nexport const UseReducerHook = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch({ type: 'ADD_TODO', payload: state.currentTodo });\n  };\n\n  const handleInputChange = e => {\n    dispatch({ type: 'UPDATE_CURRENT_TODO', payload: e.target.value });\n  };\n\n  const handleClearTodos = () => {\n    dispatch({ type: 'CLEAR_TODOS' });\n  };\n\n  const deleteATodo = (index) => {\n    dispatch({ type: 'DELETE_TODO',payload:index });\n  };\n\n  const toggleTodo = (index)=>{\n    dispatch({ type: 'TOGGLE_TODO', payload: index })\n  }\n  \n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={state.currentTodo}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      <button onClick={handleClearTodos}><li>Clear Todos</li></button>\n      <ul>\n        {state.todos.map((todo, index) => (\n          <li\n            key={index}\n            style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}\n          >\n            {todo.text}\n            <button onClick={()=>deleteATodo(index)}>X</button>\n            <button onClick={() => toggleTodo(index)}>?</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default UseReducerHook;\n`}></Code>\n    </div>\n    </>\n  );\n}\n\nexport default UseReducerHook;\n"],"mappings":"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K,CAAE;YAAA,UAAC;UAAC;YAAA;YAAA;YAAA;UAAA,QAAS;QAAA,GAL/CA,KAAK;UAAA;UAAA;UAAA;QAAA,QAOb;MAAC;QAAA;QAAA;QAAA;MAAA,QACC;IAAA;MAAA;MAAA;MAAA;IAAA,QACD,eAEN;MAAA,wBACE;QAAA,UAAG;MAED;QAAA;QAAA;QAAA;MAAA,QAAI,eACN,QAAC,IAAI;QAAC,KAAK,EAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAAE;QAAA;QAAA;QAAA;MAAA,QAAQ;IAAA;MAAA;MAAA;MAAA;IAAA,QACA;EAAA,gBACH;AAEP,CAAC;AAAA,GA5JYG,cAAc;AAAA,KAAdA,cAAc;AA8J3B,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}